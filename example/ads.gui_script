local dirtylarry = require "dirtylarry/dirtylarry"

local MAX_LOG_LINES = 20

--log logic
local gprint = print
local log = {}
local text = ""
_G.print = function(...)
    gprint(...)
    local args = {...}
    local str = "--"
    for k, v in pairs(args) do
        str = str .. tostring(v) .. " "
    end
    for line in string.gmatch(str, "([^\n]+)") do
        table.insert(log, line)
    end

    local num = #log
    for i = MAX_LOG_LINES + 1, num do
        table.remove(log, 1)
    end

    text = ""
    for k, v in pairs(log) do
        text = text .. v .. "\n"
    end
end

function update()
    gui.set_text(gui.get_node("console"), text)
end
-- end log logic

function init(self)
    msg.post(".", "acquire_input_focus")
    
    local system_name = sys.get_sys_info().system_name
    print("SYSTEM: "..system_name)
end

function on_html_loaded()
    print("HiddenWebView: on_html_loaded")
    
    local params = {
        game_url = "hoopRush" .. "/index.html",
        has_remote_view = false,
        local_instance = {
            pos = {
                left = 0,
                top = 0,
                width = 1,
                height = 1,
            }
        }
    }
    
    --[[
    local js = "document.write('<h2>Hello World!</h2><p>Have a nice day!</p>');"
    print("HiddenWebView execute_script: "..js)
    hidden_web_view.execute_script(js)
    ]]--

    local param_string = json.encode(params)
    local js = "__Start(" .. param_string .. ")"
    print("HiddenWebView execute_script: "..js)
    hidden_web_view.execute_script(js)
    hidden_web_view.set_accept_touch_events(1)

    
    -- Спрячем и покажем view-перехватчик ввода
    timer.delay(5, false, function()
        print("HiddenWebView: Touch events disabled")
        hidden_web_view.set_accept_touch_events(0)
    end)

    timer.delay(8, false, function()
        print("HiddenWebView: Touch events enabled")
        hidden_web_view.set_accept_touch_events(1)
    end)
end

function on_webview_callback(id, type, data)
    if type == hidden_web_view.CALLBACK_RESULT_GAME_LOADED then
        on_html_loaded()
    elseif type == hidden_web_view.CALLBACK_RESULT_GAME_LOADING then
        print("HiddenWebView: GAME_LOADING")
    elseif type == hidden_web_view.CALLBACK_RESULT_GAME_ERROR then
        print("HiddenWebView: GAME_ERROR")
    elseif type == hidden_web_view.CALLBACK_RESULT_JAVASCRIPT_OK then
        print("HiddenWebView: JAVASCRIPT_OK")
    elseif type == hidden_web_view.CALLBACK_RESULT_JAVASCRIPT_ERROR then
        print("HiddenWebView: JAVASCRIPT_ERROR")
    elseif type == hidden_web_view.CALLBACK_RESULT_JAVASCRIPT_CHANNEL_CALLBACK then
        print("HiddenWebView: JAVASCRIPT_CHANNEL: "..data.url)
        pprint(data)
    else
        print("HiddenWebView: Unknown callback type")
    end
end

function get_webgl_games_path()
    local sysinfo = sys.get_sys_info()
    if sysinfo.system_name == "Android" then
        return "webGL_games/"
    else
        return "assets/webGL_games/"
    end
end

function create_webview()
    print("HiddenWebView: STEP 1")
    
    local instance = hidden_web_view.create(function(self_, id, type, data)
        on_webview_callback(id, type, data)
    end)

    print("HiddenWebView: STEP 2")
    
    hidden_web_view.start_server(get_webgl_games_path())

    print("HiddenWebView: STEP 3")
    
    hidden_web_view.match_screen_size()

    print("HiddenWebView: STEP 4")

    hidden_web_view.set_debug_enabled(1) -- android only

    print("HiddenWebView: STEP 5")

    hidden_web_view.add_javascript_channel("logging")
    hidden_web_view.add_javascript_channel("_OnNewScore")
    hidden_web_view.add_javascript_channel("_OnBotScoreOneWorld")
    hidden_web_view.add_javascript_channel("_OnChangeHealth")
    hidden_web_view.add_javascript_channel("_OnCommand")
    hidden_web_view.add_javascript_channel("_OnSceneLoaded")
    hidden_web_view.add_javascript_channel("_OnGameFinished")
    hidden_web_view.add_javascript_channel("_OnConsole")
    hidden_web_view.add_javascript_channel("_OnUX")
    
    print("HiddenWebView: STEP 6")
    
    local param_string = json.encode(params)

    local x = 0
    local y = 0.3
    local width = 1
    local height = 0.6
    hidden_web_view.set_touch_interceptor_area(x, y, width, height)

    print("HiddenWebView: STEP 7")

    hidden_web_view.open_game("main.html")

    print("HiddenWebView: STEP 8")
end

function destroy_webview()
    hidden_web_view.destroy();
end

function on_input(self, action_id, action)
    
    dirtylarry:button("create_webview", action_id, action, function ()
        print("HiddenWebView: Creating webview")
        create_webview()
        print("HiddenWebView: Webview created")
    end)

    dirtylarry:button("destroy_webview", action_id, action, function ()
        print("HiddenWebView: Destroying webview")
        destroy_webview()
        print("HiddenWebView: Webview destroyed")
    end)
    
    dirtylarry:button("test", action_id, action, function ()
        print("TEST BUTTON")
    end)
    
end













