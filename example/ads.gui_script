local dirtylarry = require "dirtylarry/dirtylarry"

local MAX_LOG_LINES = 35

--log logic
local gprint = print
local log = {}
local text = ""
_G.print = function(...)
    gprint(...)
    local args = {...}
    local str = "--"
    for k, v in pairs(args) do
        str = str .. tostring(v) .. " "
    end
    for line in string.gmatch(str, "([^\n]+)") do
        table.insert(log, line)
    end

    local num = #log
    for i = MAX_LOG_LINES + 1, num do
        table.remove(log, 1)
    end

    text = ""
    for k, v in pairs(log) do
        text = text .. v .. "\n"
    end
end

function update()
    gui.set_text(gui.get_node("console"), text)
end
-- end log logic

function init(self)
    msg.post(".", "acquire_input_focus")

    local system_name = sys.get_sys_info().system_name
    print("SYSTEM: "..system_name)
end

function create_webview()

    local function on_webview_callback(self, id, type, data)
        print("webview_callback", type)

        if type == hidden_web_view.CALLBACK_RESULT_GAME_LOADED then
            print("CALLBACK_RESULT_GAME_LOADED")
        elseif type == hidden_web_view.CALLBACK_RESULT_GAME_LOADING then
            print("CALLBACK_RESULT_GAME_LOADING")
        elseif type == hidden_web_view.CALLBACK_RESULT_GAME_ERROR then
            print("CALLBACK_RESULT_GAME_ERROR")
        elseif type == hidden_web_view.CALLBACK_RESULT_JAVASCRIPT_OK then
            print("CALLBACK_RESULT_JAVASCRIPT_OK")
        elseif type == hidden_web_view.CALLBACK_RESULT_JAVASCRIPT_ERROR then
            print("CALLBACK_RESULT_JAVASCRIPT_ERROR")
        else
            print("Unknown callback type")
        end
    end


    print("STEP 1")
    
    local instance = hidden_web_view.create(function(self_, id, type, data)

        print("STEP 2")
        
        on_webview_callback(id, type, data)
    end)

    print("STEP 3")
    
    local sysinfo = sys.get_sys_info()
    if sysinfo.system_name == "Android" then
        hidden_web_view.start_server("webGL_games/")
    else
        hidden_web_view.start_server("assets/webGL_games/")
    end

    print("STEP 4")
    
    hidden_web_view.match_screen_size()
    hidden_web_view.change_visibility(1) -- android only - open
    hidden_web_view.set_debug_enabled(1) -- android only - set debug for chrome

    print("STEP 5")
    
    hidden_web_view.add_javascript_channel("logging")
    hidden_web_view.add_javascript_channel("_OnNewScore")
    hidden_web_view.add_javascript_channel("_OnBotScoreOneWorld")
    hidden_web_view.add_javascript_channel("_OnChangeHealth")
    hidden_web_view.add_javascript_channel("_OnCommand")
    hidden_web_view.add_javascript_channel("_OnSceneLoaded")
    hidden_web_view.add_javascript_channel("_OnGameFinished")
    hidden_web_view.add_javascript_channel("_OnConsole")
    hidden_web_view.add_javascript_channel("_OnUX")

    hidden_web_view.open_game("main.html")
    hidden_web_view.set_accept_touch_events(1)
    
end

function on_input(self, action_id, action)
    
    dirtylarry:button("initialization", action_id, action, function ()
        print("Creating webview...")
        create_webview()
        print("Webview created")
    end)
    
end

